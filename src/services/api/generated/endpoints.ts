/**
 * Generated by orval v6.17.0 🍺
 * Do not edit manually.
 * Conduit API
 * Conduit API documentation
 * OpenAPI spec version: 1.0.0
 */
import type {
  UserResponseResponse,
  LoginUserRequestBody,
  NewUserRequestBody,
  UpdateUserRequestBody,
  ProfileResponseResponse,
  MultipleArticlesResponseResponse,
  GetArticlesFeedParams,
  GetArticlesParams,
  SingleArticleResponseResponse,
  NewArticleRequestBody,
  UpdateArticleRequestBody,
  EmptyOkResponseResponse,
  MultipleCommentsResponseResponse,
  SingleCommentResponseResponse,
  NewCommentRequestBody,
  TagsResponseResponse
} from './endpoints.schemas'
import loginMutator from '../mutator/axios-instance';
import createUserMutator from '../mutator/axios-instance';
import getCurrentUserMutator from '../mutator/axios-instance';
import updateCurrentUserMutator from '../mutator/axios-instance';
import getProfileByUsernameMutator from '../mutator/axios-instance';
import followUserByUsernameMutator from '../mutator/axios-instance';
import unfollowUserByUsernameMutator from '../mutator/axios-instance';
import getArticlesFeedMutator from '../mutator/axios-instance';
import getArticlesMutator from '../mutator/axios-instance';
import createArticleMutator from '../mutator/axios-instance';
import getArticleMutator from '../mutator/axios-instance';
import updateArticleMutator from '../mutator/axios-instance';
import deleteArticleMutator from '../mutator/axios-instance';
import getArticleCommentsMutator from '../mutator/axios-instance';
import createArticleCommentMutator from '../mutator/axios-instance';
import deleteArticleCommentMutator from '../mutator/axios-instance';
import createArticleFavoriteMutator from '../mutator/axios-instance';
import deleteArticleFavoriteMutator from '../mutator/axios-instance';
import getTagsMutator from '../mutator/axios-instance';



  /**
 * Login for existing user
 * @summary Existing user login
 */
export const login = (
    loginUserRequestBody: LoginUserRequestBody,
 ) => {
      return loginMutator<UserResponseResponse>(
      {url: `/users/login`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: loginUserRequestBody
    },
      );
    }
  
/**
 * Register a new user
 */
export const createUser = (
    newUserRequestBody: NewUserRequestBody,
 ) => {
      return createUserMutator<UserResponseResponse>(
      {url: `/users`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: newUserRequestBody
    },
      );
    }
  
/**
 * Gets the currently logged-in user
 * @summary Get current user
 */
export const getCurrentUser = (
    
 ) => {
      return getCurrentUserMutator<UserResponseResponse>(
      {url: `/user`, method: 'get'
    },
      );
    }
  
/**
 * Updated user information for current user
 * @summary Update current user
 */
export const updateCurrentUser = (
    updateUserRequestBody: UpdateUserRequestBody,
 ) => {
      return updateCurrentUserMutator<UserResponseResponse>(
      {url: `/user`, method: 'put',
      headers: {'Content-Type': 'application/json', },
      data: updateUserRequestBody
    },
      );
    }
  
/**
 * Get a profile of a user of the system. Auth is optional
 * @summary Get a profile
 */
export const getProfileByUsername = (
    username: string,
 ) => {
      return getProfileByUsernameMutator<ProfileResponseResponse>(
      {url: `/profiles/${username}`, method: 'get'
    },
      );
    }
  
/**
 * Follow a user by username
 * @summary Follow a user
 */
export const followUserByUsername = (
    username: string,
 ) => {
      return followUserByUsernameMutator<ProfileResponseResponse>(
      {url: `/profiles/${username}/follow`, method: 'post'
    },
      );
    }
  
/**
 * Unfollow a user by username
 * @summary Unfollow a user
 */
export const unfollowUserByUsername = (
    username: string,
 ) => {
      return unfollowUserByUsernameMutator<ProfileResponseResponse>(
      {url: `/profiles/${username}/follow`, method: 'delete'
    },
      );
    }
  
/**
 * Get most recent articles from users you follow. Use query parameters to limit. Auth is required
 * @summary Get recent articles from users you follow
 */
export const getArticlesFeed = (
    params?: GetArticlesFeedParams,
 ) => {
      return getArticlesFeedMutator<MultipleArticlesResponseResponse>(
      {url: `/articles/feed`, method: 'get',
        params
    },
      );
    }
  
/**
 * Get most recent articles globally. Use query parameters to filter results. Auth is optional
 * @summary Get recent articles globally
 */
export const getArticles = (
    params?: GetArticlesParams,
 ) => {
      return getArticlesMutator<MultipleArticlesResponseResponse>(
      {url: `/articles`, method: 'get',
        params
    },
      );
    }
  
/**
 * Create an article. Auth is required
 * @summary Create an article
 */
export const createArticle = (
    newArticleRequestBody: NewArticleRequestBody,
 ) => {
      return createArticleMutator<SingleArticleResponseResponse>(
      {url: `/articles`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: newArticleRequestBody
    },
      );
    }
  
/**
 * Get an article. Auth not required
 * @summary Get an article
 */
export const getArticle = (
    slug: string,
 ) => {
      return getArticleMutator<SingleArticleResponseResponse>(
      {url: `/articles/${slug}`, method: 'get'
    },
      );
    }
  
/**
 * Update an article. Auth is required
 * @summary Update an article
 */
export const updateArticle = (
    slug: string,
    updateArticleRequestBody: UpdateArticleRequestBody,
 ) => {
      return updateArticleMutator<SingleArticleResponseResponse>(
      {url: `/articles/${slug}`, method: 'put',
      headers: {'Content-Type': 'application/json', },
      data: updateArticleRequestBody
    },
      );
    }
  
/**
 * Delete an article. Auth is required
 * @summary Delete an article
 */
export const deleteArticle = (
    slug: string,
 ) => {
      return deleteArticleMutator<EmptyOkResponseResponse>(
      {url: `/articles/${slug}`, method: 'delete'
    },
      );
    }
  
/**
 * Get the comments for an article. Auth is optional
 * @summary Get comments for an article
 */
export const getArticleComments = (
    slug: string,
 ) => {
      return getArticleCommentsMutator<MultipleCommentsResponseResponse>(
      {url: `/articles/${slug}/comments`, method: 'get'
    },
      );
    }
  
/**
 * Create a comment for an article. Auth is required
 * @summary Create a comment for an article
 */
export const createArticleComment = (
    slug: string,
    newCommentRequestBody: NewCommentRequestBody,
 ) => {
      return createArticleCommentMutator<SingleCommentResponseResponse>(
      {url: `/articles/${slug}/comments`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: newCommentRequestBody
    },
      );
    }
  
/**
 * Delete a comment for an article. Auth is required
 * @summary Delete a comment for an article
 */
export const deleteArticleComment = (
    slug: string,
    id: number,
 ) => {
      return deleteArticleCommentMutator<EmptyOkResponseResponse>(
      {url: `/articles/${slug}/comments/${id}`, method: 'delete'
    },
      );
    }
  
/**
 * Favorite an article. Auth is required
 * @summary Favorite an article
 */
export const createArticleFavorite = (
    slug: string,
 ) => {
      return createArticleFavoriteMutator<SingleArticleResponseResponse>(
      {url: `/articles/${slug}/favorite`, method: 'post'
    },
      );
    }
  
/**
 * Unfavorite an article. Auth is required
 * @summary Unfavorite an article
 */
export const deleteArticleFavorite = (
    slug: string,
 ) => {
      return deleteArticleFavoriteMutator<SingleArticleResponseResponse>(
      {url: `/articles/${slug}/favorite`, method: 'delete'
    },
      );
    }
  
/**
 * Get tags. Auth not required
 * @summary Get tags
 */
export const getTags = (
    
 ) => {
      return getTagsMutator<TagsResponseResponse>(
      {url: `/tags`, method: 'get'
    },
      );
    }
  

type AwaitedInput<T> = PromiseLike<T> | T;

    type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

export type LoginResult = NonNullable<Awaited<ReturnType<typeof login>>>
export type CreateUserResult = NonNullable<Awaited<ReturnType<typeof createUser>>>
export type GetCurrentUserResult = NonNullable<Awaited<ReturnType<typeof getCurrentUser>>>
export type UpdateCurrentUserResult = NonNullable<Awaited<ReturnType<typeof updateCurrentUser>>>
export type GetProfileByUsernameResult = NonNullable<Awaited<ReturnType<typeof getProfileByUsername>>>
export type FollowUserByUsernameResult = NonNullable<Awaited<ReturnType<typeof followUserByUsername>>>
export type UnfollowUserByUsernameResult = NonNullable<Awaited<ReturnType<typeof unfollowUserByUsername>>>
export type GetArticlesFeedResult = NonNullable<Awaited<ReturnType<typeof getArticlesFeed>>>
export type GetArticlesResult = NonNullable<Awaited<ReturnType<typeof getArticles>>>
export type CreateArticleResult = NonNullable<Awaited<ReturnType<typeof createArticle>>>
export type GetArticleResult = NonNullable<Awaited<ReturnType<typeof getArticle>>>
export type UpdateArticleResult = NonNullable<Awaited<ReturnType<typeof updateArticle>>>
export type DeleteArticleResult = NonNullable<Awaited<ReturnType<typeof deleteArticle>>>
export type GetArticleCommentsResult = NonNullable<Awaited<ReturnType<typeof getArticleComments>>>
export type CreateArticleCommentResult = NonNullable<Awaited<ReturnType<typeof createArticleComment>>>
export type DeleteArticleCommentResult = NonNullable<Awaited<ReturnType<typeof deleteArticleComment>>>
export type CreateArticleFavoriteResult = NonNullable<Awaited<ReturnType<typeof createArticleFavorite>>>
export type DeleteArticleFavoriteResult = NonNullable<Awaited<ReturnType<typeof deleteArticleFavorite>>>
export type GetTagsResult = NonNullable<Awaited<ReturnType<typeof getTags>>>
